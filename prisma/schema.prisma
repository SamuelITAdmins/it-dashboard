generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int                   @id @default(autoincrement())
  azureId             String                @unique @map("azure_id")

  // Azure data
  name                String
  email               String                @unique
  jobTitle            String?               @map("job_title")
  department          String?
  companyName         String?               @map("company_name")
  city                String?
  azureCreatedAt      DateTime?             @map("azure_created_at")
  
  // Db tracking
  lastUpdatedAt       DateTime              @updatedAt @map("last_updated_at")

  // Relations
  locationId          Int?                  @map("location_id")
  location            Locations?            @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  dataCollectionRuns  DataCollectionRuns[]
  requestedTickets    Tickets[]             @relation("TicketRequester")
  assignedTickets     Tickets[]             @relation("TicketAssignee")
}

model Locations {
  id                  Int                   @id @default(autoincrement())
  name                String
  state               String
  timezone            String
  users               Users[]
  assets              Assets[]
  tickets             Tickets[]
  metrics             Metrics[]
}

model Services {
  id                  Int                   @id @default(autoincrement())
  name                String
  apiEndpoint         String                @unique @map("api_endpoint")
  isActive            Boolean               @map("is_active")
  dataCollectionRuns  DataCollectionRuns[]
  metrics             Metrics[]
}

model DataCollectionRuns {
  id                  Int                   @id @default(autoincrement())
  startedAt           DateTime              @map("started_at")
  completedAt         DateTime              @map("completed_at")
  status              String
  errorMessage        String?               @map("error_message")
  userId              Int                   @map("user_id")
  user                Users                 @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  serviceId           Int                   @map("service_id")
  service             Services              @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Metrics {
  id                  Int                   @id @default(autoincrement())
  metricType          String                @map("metric_type")
  metricValue         Decimal               @map("metric_value")
  unit                String
  collectedAt         DateTime              @map("collected_at")
  weekEnding          DateTime              @map("week_ending")
  serviceId           Int                   @map("service_id")
  service             Services              @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId          Int?                  @map("location_id")
  location            Locations?            @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Assets {
  id                  Int                   @id @default(autoincrement())
  assetType           String                @map("asset_type")
  assetName           String                @map("asset_name")
  serialNum           String                @map("serial_num")
  status              String
  locationId          Int                   @map("location_id")
  location            Locations             @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tickets {
  id                  Int                   @id @default(autoincrement())
  fsTicketId          String                @unique @map("fs_ticket_id")

  // FreshSerice data
  subject             String
  category            String?
  description         String?
  status              String
  priority            String
  source              String
  departmentId        String                @map("department_id")
  workspaceId         Int                   @map("workspace_id")
  createdAt           DateTime              @map("created_at")
  assignedAt          DateTime?             @map("assigned_at")
  resolvedAt          DateTime?             @map("resolved_at")
  firstResponseTime   Int?                  @map("first_resp_time")
  resolutionTime      Int?                  @map("resolution_time")
  complianceMet       Boolean?              @map("compliance_met")

  // Relations
  locationId          Int?                  @map("location_id")
  location            Locations?            @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  requesterId         Int                   @map("requester_id")
  requester           Users                 @relation("TicketRequester", fields: [requesterId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  assigneeId          Int?                  @map("assignee_id")
  assignee            Users?                @relation("TicketAssignee", fields: [assigneeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
